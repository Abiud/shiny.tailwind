% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/use_tailwind.R
\name{use_tailwind}
\alias{use_tailwind}
\title{TailwindCSS with Shiny}
\usage{
use_tailwind(
  css = NULL,
  tailwindConfig = NULL,
  tailwindModule = NULL,
  version = 2
)
}
\arguments{
\item{css}{Optional. Path to ".css" file. Can use @apply tags from Tiny.}

\item{tailwindConfig}{Optional. Path to ".js" file containing json object
`window.tailwindConfig`. Do not wrap in script lines.
Pass special tailwind config, following
\url{https://beyondco.de/blog/tailwind-jit-compiler-via-cdn}.}

\item{tailwindModule}{Optional. Path to ".js" file. You must define
`window.tailwindConfig` in this script. Do not wrap in script lines.
For an example of loading module, see
\url{https://beyondco.de/blog/tailwind-jit-compiler-via-cdn}}

\item{version}{Either 2/3. Which version to use. Default is 2.}
}
\description{
TailwindCSS with Shiny
}
\details{
TailwindCSS is a utility-based design framework that makes designing simple.

  However, the complete set of tailwind css classes is massive (~15mb), so
  you don't want to load all of these. That is where Tailwind's new Just in
  Time compiling comes in. It will only load the css classes you use, as you
  use them. So if your shiny app renders ui dynamically, it will load whenever
  the UI is rendered.

  This is all possible thanks to the company Beyond Code who created a browser
  version of Tailwind Just in Time. See
  \url{https://beyondco.de/blog/tailwind-jit-compiler-via-cdn}.

  Custom css can use the `@apply` directives that come with tailwind to easily
  compile set of classes. See
  \url{https://tailwindcss.com/docs/functions-and-directives#apply} for
  more details. It just *has* to be passed to the use_tailwind function if you
  want to use the `@apply` directive.

  Custom configuration of tailwind is also possible. There are two options
  available in `use_tailwind`. First, if you don't want to use any custom
  modules, uses tailwindConfig. An example is in the folder
  `inst/examples/02-config` in the github repository. Note the `.js` file should
  only consist of the JSON object. The function will place it in the appropriate
  script tag.

  If you want to use custom modules, for example TailwindTypography, note that
  you need to use the browser-version and you have to layout the config file in
  a specific way. You need to define the config JSON object as
  `window.tailwindConfig` and you must call `window.tailwindCSS.refresh();`.
  An example is in the folder
  `inst/examples/03-modules` in the github repository. This only works for version 2
}
