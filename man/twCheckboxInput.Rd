% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/twCheckboxInput.R
\name{twCheckboxInput}
\alias{twCheckboxInput}
\title{Wrapper around \code{\link[shiny:checkboxInput]{shiny::checkboxInput()}} but allowing for more classes}
\usage{
twCheckboxInput(
  inputId,
  label = NULL,
  value = FALSE,
  width = NULL,
  disabled = FALSE,
  container_class = NULL,
  label_class = NULL,
  input_class = NULL
)
}
\arguments{
\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{label}{Display label for the control, or \code{NULL} for no label.}

\item{value}{Initial value (\code{TRUE} or \code{FALSE}).}

\item{width}{The width of the input, e.g. \code{'400px'}, or \code{'100\%'};
see \code{\link[shiny:validateCssUnit]{validateCssUnit()}}.}

\item{disabled}{if the user should not be able to interact with the field}

\item{container_class}{additional classes to be applied to the container}

\item{label_class}{additional classes to be applied to the label}

\item{input_class}{additional classes to be applied to the input elements}
}
\description{
Wrapper around \code{\link[shiny:checkboxInput]{shiny::checkboxInput()}} but allowing for more classes
}
\examples{
shiny::checkboxInput("id", "label", value = FALSE)
twCheckboxInput("id", "label", value = TRUE,
                container_class = "CONTAINER", label_class = "LABEL",
                input_class = "INPUT")

if (interactive()) {
library(shiny)
# basic example
shinyApp(
    ui = fluidPage(
        use_tailwind(),
        twCheckboxInput(
          "chk", "Check me!", value = TRUE,
          container_class = "runded-tl-lg bg-gray-200 m-4 p-2",
          label_class = "font-serif text-red-500",
          input_class = "checked:focus:bg-red-200 hover:bg-red-500 bg-red-200"
        ),
        verbatimTextOutput("out")
    ),
    server = function(input, output) {
        output$out <- renderText({input$chk})
    }
)
}
}
\seealso{
\code{\link[shiny:checkboxInput]{shiny::checkboxInput()}}
}
